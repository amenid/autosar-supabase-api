"""
AUTOSAR RAG API - VERSION FINALE OPTIMIS√âE CLOUD
S√©curit√© + RAG + Chiffrement + Protection (Sans complexit√©s d√©ploiement)
Version 5.0.0 - Cloud Optimized - Deploy Ready
"""

import os
import time
import json
import secrets
import hashlib
import smtplib
import requests
import base64
import re
from datetime import datetime, timedelta, timezone
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List, Tuple, Optional

from flask import Flask, request, jsonify
from flask_cors import CORS

# Imports pour chiffrement (compatible cloud)
from cryptography.fernet import Fernet
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

# ===== CONFIGURATION CLOUD-FRIENDLY =====
DEBUG_MODE = os.getenv('DEBUG', 'False').lower() == 'true'
PORT = int(os.getenv('PORT', 8765))

# Configuration Email BREVO (simplifi√©)
SMTP_SERVER = os.getenv('SMTP_SERVER', 'smtp-relay.brevo.com')
SMTP_PORT = int(os.getenv('SMTP_PORT', 587))
SMTP_USERNAME = os.getenv('SMTP_USERNAME', '7d7544008@smtp-brevo.com')
SMTP_PASSWORD = os.getenv('SMTP_PASSWORD', 'JMjV80bfWNQhrPCK')
FROM_EMAIL = os.getenv('FROM_EMAIL', 'ameniaydiii@gmail.com')

# Configuration de s√©curit√© (simplifi√©)
MAX_ATTACKS_BEFORE_BLOCK = 3
SESSION_DURATION_HOURS = 24
VERIFICATION_CODE_EXPIRY_MINUTES = 10
SECURITY_TEAM_EMAILS = ['rahmafiras01@gmail.com', 'm24129370@gmail.com']

print(f"üöÄ Starting AUTOSAR Cloud-Optimized RAG API...")

# ===== STOCKAGE EN M√âMOIRE (Cloud-Friendly) =====
class InMemoryStorage:
    """Stockage en m√©moire pour remplacer les DB complexes"""
    
    def __init__(self):
        self.users = {}
        self.sessions = {}
        self.verification_codes = {}
        self.attacks = {}
        self.blocked_users = set()
        print("üíæ In-memory storage initialized")
    
    def clean_expired_data(self):
        """Nettoie les donn√©es expir√©es"""
        current_time = datetime.now(timezone.utc)
        
        # Nettoyer codes expir√©s
        expired_codes = [
            email for email, data in self.verification_codes.items()
            if current_time > datetime.fromisoformat(data['expires_at'].replace('Z', '+00:00'))
        ]
        for email in expired_codes:
            del self.verification_codes[email]
        
        # Nettoyer sessions expir√©es
        expired_sessions = [
            sid for sid, data in self.sessions.items()
            if current_time > datetime.fromisoformat(data['expires_at'].replace('Z', '+00:00'))
        ]
        for sid in expired_sessions:
            del self.sessions[sid]

# ===== SYST√àME DE CHIFFREMENT SIMPLIFI√â =====
class CloudEncryption:
    """Syst√®me de chiffrement optimis√© pour le cloud"""
    
    def __init__(self):
        # Utiliser variable d'environnement ou g√©n√©rer
        key_env = os.getenv('ENCRYPTION_KEY')
        if key_env:
            self.key = key_env.encode()
        else:
            self.key = Fernet.generate_key()
        
        self.cipher_suite = Fernet(self.key)
        print("üîê Cloud encryption initialized")
    
    def encrypt_message(self, message: str) -> str:
        try:
            encrypted = self.cipher_suite.encrypt(message.encode('utf-8'))
            return base64.urlsafe_b64encode(encrypted).decode('utf-8')
        except Exception as e:
            print(f"‚ùå Encryption error: {e}")
            return message  # Fallback non chiffr√©
    
    def decrypt_message(self, encrypted_message: str) -> str:
        try:
            encrypted_bytes = base64.urlsafe_b64decode(encrypted_message.encode('utf-8'))
            decrypted = self.cipher_suite.decrypt(encrypted_bytes)
            return decrypted.decode('utf-8')
        except Exception as e:
            print(f"‚ùå Decryption error: {e}")
            return encrypted_message

# ===== SYST√àME DE S√âCURIT√â INTELLIGENT =====
class SmartSecurityFilter:
    """Filtrage intelligent XSS/SQL avec contexte technique"""
    
    def __init__(self):
        # Patterns malveillants (excluant contexte technique)
        self.malicious_patterns = {
            'xss': [
                r'<script[^>]*>(?!.*?(exemple|example|demo|test))',
                r'javascript:(?!.*?(exemple|example|demo))',
                r'onload\s*=(?!.*?(exemple|example))',
                r'document\.cookie(?!.*?(exemple|example))',
                r'eval\s*\((?!.*?(exemple|example))',
            ],
            'sql': [
                r'\bunion\s+select\b(?!.*?(exemple|example|demo))',
                r'\bdrop\s+table\b(?!.*?(exemple|example))',
                r'\bdelete\s+from\b(?!.*?(exemple|example))',
                r'--\s*(?!.*?(exemple|example|comment))',
                r'1\s*=\s*1(?!.*?(exemple|example))',
            ]
        }
        
        self.technical_keywords = [
            'autosar', 'ecu', 'can', 'lin', 'flexray', 'ethernet', 'bsw', 'rte',
            'example', 'exemple', 'demo', 'test', 'documentation', 'tutorial'
        ]
        print("üõ°Ô∏è Smart security filter initialized")
    
    def is_technical_context(self, text: str) -> bool:
        """D√©tecte si c'est un contexte technique l√©gitime"""
        text_lower = text.lower()
        technical_score = sum(1 for keyword in self.technical_keywords if keyword in text_lower)
        return technical_score >= 2
    
    def analyze_security_threats(self, text: str) -> Dict:
        """Analyse compl√®te des menaces avec contexte"""
        threats = []
        text_lower = text.lower()
        is_technical = self.is_technical_context(text)
        
        # XSS Check
        for pattern in self.malicious_patterns['xss']:
            if re.search(pattern, text_lower, re.IGNORECASE):
                threats.append(f"XSS malveillant: {pattern}")
        
        # SQL Check
        for pattern in self.malicious_patterns['sql']:
            if re.search(pattern, text_lower, re.IGNORECASE):
                threats.append(f"SQL Injection: {pattern}")
        
        # Contexte technique = plus tol√©rant
        if is_technical and 'exemple' in text_lower or 'example' in text_lower:
            threats = [t for t in threats if 'malveillant' in t]  # Garder seulement les vraiment malveillants
        
        risk_level = "HIGH" if len(threats) > 2 else "MEDIUM" if threats else "LOW"
        
        return {
            'threats': threats,
            'risk_level': risk_level,
            'is_safe': len(threats) == 0,
            'is_technical_context': is_technical,
            'blocked': risk_level == 'HIGH'
        }

# ===== SYST√àME RAG SIMPLIFI√â =====
class CloudRAGSystem:
    """Syst√®me RAG optimis√© pour le cloud (sans d√©pendances lourdes)"""
    
    def __init__(self):
        self.knowledge_base = self._create_autosar_knowledge()
        self.chunks = self._create_chunks()
        print(f"üß† Cloud RAG initialized with {len(self.chunks)} chunks")
    
    def _create_autosar_knowledge(self):
        return {
            "architecture": [
                "AUTOSAR (AUTomotive Open System ARchitecture) est une architecture logicielle standardis√©e pour l'industrie automobile.",
                "L'architecture AUTOSAR Classic comprend trois couches : Application Layer, Runtime Environment (RTE), et Basic Software (BSW).",
                "AUTOSAR Adaptive Platform est con√ßue pour les applications haute performance comme la conduite autonome.",
                "Le Runtime Environment (RTE) fait l'interface entre les composants logiciels et le Basic Software.",
                "Basic Software (BSW) fournit les services de base : communication, gestion m√©moire, diagnostics."
            ],
            "communication": [
                "AUTOSAR supporte CAN, LIN, FlexRay et Ethernet Automotive pour la communication inter-ECU.",
                "CAN permet une communication temps r√©el jusqu'√† 1 Mbps, CAN-FD jusqu'√† 8 Mbps.",
                "FlexRay offre une communication d√©terministe jusqu'√† 10 Mbps pour applications critiques.",
                "Ethernet Automotive permet des d√©bits √©lev√©s (100 Mbps √† 1 Gbps) pour multim√©dia.",
                "LIN est utilis√© pour applications moins critiques avec d√©bit maximum 20 kbps."
            ],
            "security": [
                "AUTOSAR int√®gre des m√©canismes de cybers√©curit√© : authentification, chiffrement, d√©tection d'intrusion.",
                "S√©curit√© fonctionnelle ISO 26262 int√©gr√©e pour comportement s√ªr en cas de d√©faillance.",
                "Secure Boot assure l'int√©grit√© logicielle au d√©marrage avec v√©rification d'authenticit√©.",
                "Hardware Security Module (HSM) fournit services cryptographiques mat√©riels s√©curis√©s.",
                "Intrusion Detection System (IDS) surveille le r√©seau pour d√©tecter activit√©s suspectes."
            ],
            "rfc_standards": [
                "AUTOSAR int√®gre les standards RFC pour communication IP : RFC 791 (IPv4), RFC 793 (TCP), RFC 768 (UDP).",
                "RFC 2616 (HTTP) utilis√© pour interfaces RESTful et mises √† jour over-the-air (OTA).",
                "RFC 6455 (WebSocket) permet communication full-duplex temps r√©el v√©hicule-cloud.",
                "S√©curit√© RFC : RFC 5246 (TLS 1.2), RFC 8446 (TLS 1.3) pour communications chiffr√©es.",
                "Protocoles SOME/IP utilisent UDP/TCP selon RFC pour middleware orient√© services."
            ],
            "development": [
                "AUTOSAR utilise Model-Based Development avec MATLAB/Simulink et outils de configuration.",
                "M√©thodologie AUTOSAR suit processus en V : sp√©cification, impl√©mentation, int√©gration, validation.",
                "Software Component (SWC) est l'unit√© de base encapsulant logique m√©tier et interfaces.",
                "ARXML (AUTOSAR XML) format standard pour √©changer descriptions d'architecture entre outils.",
                "Basic Software Configuration permet adapter modules BSW aux besoins projet et mat√©riel."
            ],
            "diagnostics": [
                "AUTOSAR impl√©mente services diagnostic UDS (Unified Diagnostic Services) selon ISO 14229.",
                "Diagnostic Communication Manager (DCM) g√®re communications entre outil externe et ECU.",
                "Diagnostic Event Manager (DEM) collecte, stocke et g√®re codes d'erreur DTC.",
                "Function Inhibition Manager (FIM) d√©sactive fonctions en cas de d√©faillance d√©tect√©e.",
                "On-Board Diagnostics (OBD) permet surveillance continue syst√®mes √©missions."
            ]
        }
    
    def _create_chunks(self):
        """Cr√©e des chunks de connaissances avec scoring"""
        chunks = []
        chunk_id = 0
        
        for category, contents in self.knowledge_base.items():
            for content in contents:
                chunks.append({
                    'id': chunk_id,
                    'content': content,
                    'category': category,
                    'keywords': self._extract_keywords(content),
                    'source': f"autosar_{category}_guide.pdf"
                })
                chunk_id += 1
        
        return chunks
    
    def _extract_keywords(self, text):
        """Extrait mots-cl√©s AUTOSAR du texte"""
        keywords = ['autosar', 'ecu', 'can', 'lin', 'flexray', 'ethernet', 'bsw', 'rte', 
                   'swc', 'hsm', 'tcp', 'udp', 'rfc', 'security', 'adaptive', 'classic',
                   'uds', 'dcm', 'dem', 'fim', 'obd', 'iso', 'some/ip']
        text_lower = text.lower()
        return [kw for kw in keywords if kw in text_lower]
    
    def search_chunks(self, query: str, top_k: int = 3) -> List[Dict]:
        """Recherche simple mais efficace par mots-cl√©s"""
        query_lower = query.lower()
        query_words = set(query_lower.split())
        scored_chunks = []
        
        for chunk in self.chunks:
            score = 0
            content_lower = chunk['content'].lower()
            
            # Score bas√© sur mots-cl√©s
            for keyword in chunk['keywords']:
                if keyword in query_lower:
                    score += 5
            
            # Score bas√© sur mots de la requ√™te
            for word in query_words:
                if len(word) > 2 and word in content_lower:
                    score += content_lower.count(word) * 2
            
            # Bonus si cat√©gorie correspond
            if chunk['category'] in query_lower:
                score += 3
            
            if score > 0:
                scored_chunks.append((chunk, score))
        
        # Trier et retourner top_k
        scored_chunks.sort(key=lambda x: x[1], reverse=True)
        return [chunk for chunk, score in scored_chunks[:top_k]]
    
    def generate_answer(self, query: str, chunks: List[Dict]) -> str:
        """G√©n√®re r√©ponse bas√©e sur chunks trouv√©s"""
        if not chunks:
            return f"""‚ùå Aucune information trouv√©e pour "{query}".

üîç **Essayez des questions sur :**
- **Architecture AUTOSAR** : RTE, BSW, SWC, Adaptive Platform
- **Communication** : CAN, LIN, FlexRay, Ethernet
- **S√©curit√©** : HSM, SecOC, ISO 26262, cybers√©curit√©
- **Standards RFC** : TCP/IP, HTTP, WebSocket, TLS
- **D√©veloppement** : ARXML, Model-Based, ASPICE
- **Diagnostics** : UDS, DCM, DEM, OBD

üí° **Exemples de questions :**
- "Qu'est-ce que l'architecture AUTOSAR ?"
- "Comment fonctionne la communication CAN ?"
- "Qu'est-ce que le RTE ?"
- "Comment fonctionne SecOC ?"
"""

        # Construire r√©ponse structur√©e
        response = f"# üöó R√©ponse AUTOSAR : {query}\n\n"
        
        for i, chunk in enumerate(chunks, 1):
            response += f"## {i}. {chunk['category'].replace('_', ' ').title()}\n\n"
            response += f"{chunk['content']}\n\n"
            
            if i < len(chunks):
                response += "---\n\n"
        
        # Sources et m√©tadonn√©es
        sources = list(set(chunk['source'] for chunk in chunks))
        categories = list(set(chunk['category'] for chunk in chunks))
        
        response += f"\nüìö **Sources :** {', '.join(sources)}\n"
        response += f"üè∑Ô∏è **Cat√©gories :** {', '.join(categories)}\n"
        response += f"‚è∞ **G√©n√©r√© :** {datetime.now().strftime('%H:%M:%S')}"
        
        return response

# ===== SYST√àME D'ALERTES SIMPLIFI√â =====
class SimpleAlertSystem:
    """Syst√®me d'alertes email simplifi√© pour le cloud"""
    
    def __init__(self):
        self.last_alert_time = 0
        self.min_interval = 300  # 5 minutes
        print("üö® Simple alert system initialized")
    
    def send_attack_alert(self, user_email: str, attack_info: Dict) -> bool:
        """Envoie alerte simple √† l'√©quipe s√©curit√©"""
        current_time = time.time()
        if current_time - self.last_alert_time < self.min_interval:
            return False  # Rate limited
        
        try:
            subject = f"üö® AUTOSAR Security - Attack from {user_email}"
            
            body = f"""
AUTOSAR Security Alert

User: {user_email}
Attack Types: {', '.join(attack_info.get('attack_types', []))}
Risk Level: {attack_info.get('risk_level', 'UNKNOWN')}
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Details: {attack_info.get('details', '')[:200]}...

Actions: User blocked automatically.

AUTOSAR RAG Security System
            """
            
            msg = MIMEText(body, 'plain', 'utf-8')
            msg['From'] = f"AUTOSAR Security <{FROM_EMAIL}>"
            msg['To'] = ', '.join(SECURITY_TEAM_EMAILS)
            msg['Subject'] = subject
            
            server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
            server.quit()
            
            self.last_alert_time = current_time
            print(f"‚úÖ Alert sent to {len(SECURITY_TEAM_EMAILS)} recipients")
            return True
            
        except Exception as e:
            print(f"‚ùå Alert error: {e}")
            return False

# ===== GESTIONNAIRE PRINCIPAL =====
class AutosarSecureManager:
    """Gestionnaire principal int√©grant tous les syst√®mes"""
    
    def __init__(self):
        self.storage = InMemoryStorage()
        self.encryption = CloudEncryption()
        self.security = SmartSecurityFilter()
        self.rag = CloudRAGSystem()
        self.alerts = SimpleAlertSystem()
        print("üîí AUTOSAR Secure Manager initialized")
    
    def generate_verification_code(self):
        return f"{secrets.randbelow(900000) + 100000:06d}"
    
    def generate_session_id(self):
        return secrets.token_urlsafe(32)
    
    def send_verification_email(self, email: str, code: str) -> bool:
        """Envoie email de v√©rification"""
        try:
            subject = "üîê AUTOSAR RAG - Code de V√©rification"
            
            html_body = f"""
            <html>
            <body style="font-family: Arial; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 30px; text-align: center;">
                    <h1>üîê AUTOSAR Secure RAG</h1>
                    <p>Assistant IA S√©curis√© pour l'Automobile</p>
                </div>
                
                <div style="padding: 30px; background: white; border: 1px solid #e3f2fd;">
                    <h2 style="color: #007bff;">Code de V√©rification S√©curis√©</h2>
                    
                    <div style="background: #f8f9fa; border: 2px solid #007bff; padding: 20px; text-align: center; margin: 20px 0;">
                        <div style="font-size: 32px; font-weight: bold; color: #007bff; letter-spacing: 5px; font-family: monospace;">
                            {code}
                        </div>
                    </div>
                    
                    <p>Entrez ce code pour acc√©der √† l'assistant AUTOSAR s√©curis√© avec base de connaissances technique compl√®te.</p>
                    
                    <div style="background: #d1edff; padding: 15px; border-radius: 5px; margin: 20px 0;">
                        <h3>üõ°Ô∏è S√©curit√© Renforc√©e :</h3>
                        <ul>
                            <li>üîê Chiffrement end-to-end des messages</li>
                            <li>üõ°Ô∏è Protection XSS/SQL intelligente</li>
                            <li>üö´ Blocage automatique apr√®s 3 attaques</li>
                            <li>üß† Base de connaissances AUTOSAR compl√®te</li>
                            <li>üìß Alertes s√©curit√© √©quipe technique</li>
                        </ul>
                    </div>
                    
                    <div style="background: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0;">
                        <h3>üöó Fonctionnalit√©s RAG AUTOSAR :</h3>
                        <ul>
                            <li>Architecture (RTE, BSW, SWC)</li>
                            <li>Communication (CAN, LIN, FlexRay, Ethernet)</li>
                            <li>S√©curit√© (HSM, SecOC, ISO 26262)</li>
                            <li>Standards RFC (TCP/IP, HTTP, WebSocket)</li>
                            <li>D√©veloppement (ARXML, Model-Based)</li>
                            <li>Diagnostics (UDS, DCM, DEM, OBD)</li>
                        </ul>
                    </div>
                    
                    <p><small>‚è∞ Code expire dans {VERIFICATION_CODE_EXPIRY_MINUTES} minutes.</small></p>
                </div>
                
                <div style="background: #f8f9fa; padding: 20px; text-align: center; color: #6c757d; font-size: 12px;">
                    AUTOSAR Secure RAG API v5.0 - Cloud Optimized<br>
                    Chiffrement AES-256 | Protection Multi-Couches | Assistant IA Technique
                </div>
            </body>
            </html>
            """
            
            msg = MIMEMultipart('alternative')
            msg['From'] = f"AUTOSAR Secure <{FROM_EMAIL}>"
            msg['To'] = email
            msg['Subject'] = subject
            
            html_part = MIMEText(html_body, 'html', 'utf-8')
            msg.attach(html_part)
            
            server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
            server.quit()
            
            print(f"‚úÖ Verification email sent to: {email}")
            return True
            
        except Exception as e:
            print(f"‚ùå Email error: {e}")
            return False
    
    def request_verification(self, email: str, extension_id: str) -> Dict:
        """Demande de code de v√©rification"""
        try:
            # Nettoyer donn√©es expir√©es
            self.storage.clean_expired_data()
            
            # V√©rifier si utilisateur bloqu√©
            if email in self.storage.blocked_users:
                return {"success": False, "message": "Utilisateur bloqu√© pour activit√© malveillante"}
            
            # G√©n√©rer code
            code = self.generate_verification_code()
            expires_at = (datetime.now(timezone.utc) + timedelta(minutes=VERIFICATION_CODE_EXPIRY_MINUTES)).isoformat()
            
            # Stocker code
            self.storage.verification_codes[email] = {
                'code': code,
                'created_at': datetime.now(timezone.utc).isoformat(),
                'expires_at': expires_at,
                'extension_id': extension_id
            }
            
            # Envoyer email
            email_sent = self.send_verification_email(email, code)
            
            if email_sent:
                return {
                    "success": True,
                    "message": f"Code de v√©rification envoy√© √† {email}",
                    "expires_in_minutes": VERIFICATION_CODE_EXPIRY_MINUTES,
                    "security_features": [
                        "Chiffrement AES-256",
                        "Protection XSS/SQL",
                        "RAG AUTOSAR int√©gr√©"
                    ]
                }
            else:
                return {"success": False, "message": "Erreur envoi email"}
                
        except Exception as e:
            print(f"‚ùå Request verification error: {e}")
            return {"success": False, "message": "Erreur serveur"}
    
    def verify_code(self, email: str, code: str, extension_id: str) -> Dict:
        """V√©rification du code et cr√©ation de session"""
        try:
            # Nettoyer donn√©es expir√©es
            self.storage.clean_expired_data()
            
            # V√©rifier si utilisateur bloqu√©
            if email in self.storage.blocked_users:
                return {"success": False, "message": "Utilisateur bloqu√©"}
            
            # V√©rifier code
            if email not in self.storage.verification_codes:
                return {"success": False, "message": "Code invalide ou expir√©"}
            
            code_data = self.storage.verification_codes[email]
            
            if code_data['code'] != code:
                return {"success": False, "message": "Code incorrect"}
            
            # V√©rifier expiration
            expires_at = datetime.fromisoformat(code_data['expires_at'].replace('Z', '+00:00'))
            if datetime.now(timezone.utc) > expires_at:
                return {"success": False, "message": "Code expir√©"}
            
            # Cr√©er session
            session_id = self.generate_session_id()
            session_expires = (datetime.now(timezone.utc) + timedelta(hours=SESSION_DURATION_HOURS)).isoformat()
            
            self.storage.sessions[session_id] = {
                'email': email,
                'created_at': datetime.now(timezone.utc).isoformat(),
                'expires_at': session_expires,
                'extension_id': extension_id,
                'last_activity': datetime.now(timezone.utc).isoformat()
            }
            
            # Supprimer code utilis√©
            del self.storage.verification_codes[email]
            
            print(f"‚úÖ Session created for {email}: {session_id[:16]}...")
            
            return {
                "success": True,
                "session_id": session_id,
                "expires_at": session_expires,
                "security_enabled": True,
                "rag_enabled": True,
                "features": {
                    "encryption": "AES-256",
                    "xss_protection": "Smart filtering",
                    "rag_chunks": len(self.rag.chunks),
                    "knowledge_categories": list(self.rag.knowledge_base.keys())
                }
            }
            
        except Exception as e:
            print(f"‚ùå Verify code error: {e}")
            return {"success": False, "message": "Erreur serveur"}
    
    def validate_session(self, session_id: str) -> Dict:
        """Validation de session"""
        try:
            if session_id not in self.storage.sessions:
                return {"valid": False, "message": "Session non trouv√©e"}
            
            session = self.storage.sessions[session_id]
            
            # V√©rifier expiration
            expires_at = datetime.fromisoformat(session['expires_at'].replace('Z', '+00:00'))
            if datetime.now(timezone.utc) > expires_at:
                del self.storage.sessions[session_id]
                return {"valid": False, "message": "Session expir√©e"}
            
            # V√©rifier si utilisateur bloqu√©
            if session['email'] in self.storage.blocked_users:
                return {"valid": False, "message": "Utilisateur bloqu√©"}
            
            # Mettre √† jour activit√©
            session['last_activity'] = datetime.now(timezone.utc).isoformat()
            
            return {
                "valid": True,
                "email": session['email'],
                "expires_at": session['expires_at'],
                "security_enabled": True
            }
            
        except Exception as e:
            print(f"‚ùå Validate session error: {e}")
            return {"valid": False, "message": "Erreur serveur"}
    
    def process_secure_message(self, session_id: str, message: str, encrypted: bool = False) -> Dict:
        """Traite un message s√©curis√© avec RAG"""
        try:
            # Valider session
            validation = self.validate_session(session_id)
            if not validation["valid"]:
                return {"success": False, "message": "Session invalide"}
            
            user_email = validation["email"]
            
            # D√©chiffrer si n√©cessaire
            if encrypted:
                message = self.encryption.decrypt_message(message)
            
            print(f"üîç Processing message from {user_email}: '{message[:50]}...'")
            
            # V√©rification s√©curit√©
            security_check = self.security.analyze_security_threats(message)
            
            if not security_check['is_safe']:
                print(f"üö® ATTACK from {user_email}: {security_check['threats']}")
                
                # Enregistrer attaque
                if user_email not in self.storage.attacks:
                    self.storage.attacks[user_email] = []
                
                self.storage.attacks[user_email].append({
                    'timestamp': datetime.now(timezone.utc).isoformat(),
                    'threats': security_check['threats'],
                    'risk_level': security_check['risk_level'],
                    'message': message[:100]
                })
                
                # Bloquer apr√®s 3 attaques
                if len(self.storage.attacks[user_email]) >= MAX_ATTACKS_BEFORE_BLOCK:
                    self.storage.blocked_users.add(user_email)
                    
                    # Envoyer alerte
                    self.alerts.send_attack_alert(user_email, {
                        'attack_types': ['XSS/SQL'],
                        'risk_level': security_check['risk_level'],
                        'details': message
                    })
                    
                    return {
                        "success": False,
                        "user_blocked": True,
                        "message": f"üö´ Utilisateur {user_email} bloqu√© apr√®s {MAX_ATTACKS_BEFORE_BLOCK} attaques. √âquipe s√©curit√© alert√©e."
                    }
                
                return {
                    "success": False,
                    "attack_detected": True,
                    "attack_count": len(self.storage.attacks[user_email]),
                    "message": f"üö® Attaque d√©tect√©e ({len(self.storage.attacks[user_email])}/{MAX_ATTACKS_BEFORE_BLOCK}). Message bloqu√©."
                }
            
            # Traitement RAG normal
            chunks = self.rag.search_chunks(message, top_k=3)
            answer = self.rag.generate_answer(message, chunks)
            
            # Chiffrer r√©ponse si demand√©
            encrypted_answer = self.encryption.encrypt_message(answer) if encrypted else None
            
            print(f"‚úÖ RAG response generated for {user_email}")
            
            return {
                "success": True,
                "answer": answer,
                "encrypted_answer": encrypted_answer,
                "sources": [
                    {
                        "source": chunk['source'],
                        "category": chunk['category'],
                        "keywords": chunk['keywords']
                    } for chunk in chunks
                ],
                "security_info": {
                    "threats_detected": 0,
                    "technical_context": security_check['is_technical_context'],
                    "risk_level": "LOW"
                },
                "rag_stats": {
                    "chunks_found": len(chunks),
                    "total_chunks": len(self.rag.chunks),
                    "search_time": "< 1s"
                }
            }
            
        except Exception as e:
            print(f"‚ùå Process message error: {e}")
            return {"success": False, "message": "Erreur serveur"}

# ===== INITIALISATION =====
print("üîê Initializing AUTOSAR Secure Manager...")
manager = AutosarSecureManager()
print("‚úÖ All systems initialized")

# ===== ROUTES API =====

@app.route('/', methods=['GET'])
def root():
    return jsonify({
        "message": "AUTOSAR SECURE RAG API - VERSION FINALE OPTIMIS√âE CLOUD",
        "version": "5.0.0-cloud-optimized",
        "status": "online",
        "features": [
            "üîê Chiffrement end-to-end AES-256",
            "üõ°Ô∏è Protection XSS/SQL intelligente", 
            "üö® D√©tection d'attaques temps r√©el",
            "üö´ Blocage automatique (3 attaques)",
            "üìß Alertes s√©curit√© √©quipe",
            "üß† RAG AUTOSAR int√©gr√©",
            "‚òÅÔ∏è Optimis√© cloud (sans DB complexes)",
            "‚ö° D√©ploiement ultra-rapide"
        ],
        "security_stats": {
            "blocked_users": len(manager.storage.blocked_users),
            "active_sessions": len(manager.storage.sessions),
            "max_attacks": MAX_ATTACKS_BEFORE_BLOCK
        },
        "rag_stats": {
            "chunks_available": len(manager.rag.chunks),
            "categories": list(manager.rag.knowledge_base.keys())
        },
        "endpoints": [
            "GET /health - Sant√© du syst√®me",
            "POST /auth/request-verification - Demander code",
            "POST /auth/verify-code - V√©rifier code",
            "POST /auth/validate-session - Valider session",
            "POST /chat/secure-message - Chat s√©curis√©",
            "POST /security/encrypt - Chiffrer message",
            "POST /security/decrypt - D√©chiffrer message",
            "GET /admin/stats - Statistiques admin"
        ]
    })

@app.route('/health', methods=['GET'])
def health():
    manager.storage.clean_expired_data()
    
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "version": "5.0.0-cloud-optimized",
        "storage": {
            "type": "in-memory (cloud-friendly)",
            "users": len(manager.storage.users),
            "active_sessions": len(manager.storage.sessions),
            "verification_codes": len(manager.storage.verification_codes),
            "blocked_users": len(manager.storage.blocked_users)
        },
        "security": {
            "encryption": "AES-256 active",
            "filtering": "XSS/SQL intelligent",
            "max_attacks": MAX_ATTACKS_BEFORE_BLOCK,
            "alert_recipients": len(SECURITY_TEAM_EMAILS)
        },
        "rag_system": {
            "status": "active",
            "chunks": len(manager.rag.chunks),
            "categories": len(manager.rag.knowledge_base)
        }
    })

@app.route('/auth/request-verification', methods=['POST'])
def request_verification():
    data = request.get_json()
    email = data.get('email')
    extension_id = data.get('extension_id', 'web')
    
    if not email:
        return jsonify({"success": False, "message": "Email requis"}), 400
    
    result = manager.request_verification(email, extension_id)
    return jsonify(result)

@app.route('/auth/verify-code', methods=['POST'])
def verify_code():
    data = request.get_json()
    email = data.get('email')
    code = data.get('code')
    extension_id = data.get('extension_id', 'web')
    
    if not all([email, code]):
        return jsonify({"success": False, "message": "Email et code requis"}), 400
    
    result = manager.verify_code(email, code, extension_id)
    return jsonify(result)

@app.route('/auth/validate-session', methods=['POST'])
def validate_session():
    data = request.get_json()
    session_id = data.get('session_id')
    
    if not session_id:
        return jsonify({"valid": False, "message": "Session ID requis"}), 400
    
    result = manager.validate_session(session_id)
    return jsonify(result)

@app.route('/chat/secure-message', methods=['POST'])
def secure_message():
    data = request.get_json()
    session_id = data.get('session_id')
    message = data.get('message')
    encrypted_message = data.get('encrypted_message')
    
    if not session_id:
        return jsonify({"success": False, "message": "Session ID requis"}), 400
    
    if not message and not encrypted_message:
        return jsonify({"success": False, "message": "Message requis"}), 400
    
    # Utiliser message chiffr√© ou normal
    final_message = encrypted_message if encrypted_message else message
    is_encrypted = bool(encrypted_message)
    
    result = manager.process_secure_message(session_id, final_message, is_encrypted)
    return jsonify(result)

@app.route('/security/encrypt', methods=['POST'])
def encrypt_endpoint():
    data = request.get_json()
    message = data.get('message')
    
    if not message:
        return jsonify({"success": False, "message": "Message requis"}), 400
    
    try:
        encrypted = manager.encryption.encrypt_message(message)
        return jsonify({
            "success": True,
            "encrypted_message": encrypted,
            "original_length": len(message),
            "encrypted_length": len(encrypted)
        })
    except Exception as e:
        return jsonify({"success": False, "message": "Erreur chiffrement"}), 500

@app.route('/security/decrypt', methods=['POST'])
def decrypt_endpoint():
    data = request.get_json()
    encrypted_message = data.get('encrypted_message')
    
    if not encrypted_message:
        return jsonify({"success": False, "message": "Message chiffr√© requis"}), 400
    
    try:
        decrypted = manager.encryption.decrypt_message(encrypted_message)
        return jsonify({
            "success": True,
            "decrypted_message": decrypted,
            "encrypted_length": len(encrypted_message),
            "decrypted_length": len(decrypted)
        })
    except Exception as e:
        return jsonify({"success": False, "message": "Erreur d√©chiffrement"}), 500

@app.route('/admin/stats', methods=['GET'])
def admin_stats():
    manager.storage.clean_expired_data()
    
    return jsonify({
        "system": {
            "status": "operational",
            "version": "5.0.0-cloud-optimized",
            "uptime": "available",
            "storage_type": "in-memory (cloud-friendly)"
        },
        "users": {
            "total_users": len(manager.storage.users),
            "active_sessions": len(manager.storage.sessions),
            "blocked_users": len(manager.storage.blocked_users),
            "pending_verifications": len(manager.storage.verification_codes)
        },
        "security": {
            "total_attacks": sum(len(attacks) for attacks in manager.storage.attacks.values()),
            "blocked_users_list": list(manager.storage.blocked_users),
            "max_attacks_threshold": MAX_ATTACKS_BEFORE_BLOCK,
            "alert_system": "active"
        },
        "rag_system": {
            "chunks_available": len(manager.rag.chunks),
            "knowledge_categories": list(manager.rag.knowledge_base.keys()),
            "search_algorithm": "keyword-based scoring"
        },
        "timestamp": datetime.now(timezone.utc).isoformat()
    })

# ===== GESTION DES ERREURS =====
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint non trouv√©"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Erreur serveur interne"}), 500

# ===== LANCEMENT =====
if __name__ == '__main__':
    print(f"üöÄ AUTOSAR Secure RAG API v5.0.0 - Cloud Optimized")
    print(f"üîê Chiffrement AES-256 : ‚úÖ")
    print(f"üõ°Ô∏è Protection XSS/SQL : ‚úÖ")
    print(f"üß† RAG AUTOSAR : {len(manager.rag.chunks)} chunks")
    print(f"üìß Alertes √©quipe : {len(SECURITY_TEAM_EMAILS)} destinataires")
    print(f"‚òÅÔ∏è Optimis√© cloud : ‚úÖ (sans DB complexes)")
    print(f"üö´ Blocage : Max {MAX_ATTACKS_BEFORE_BLOCK} attaques")
    print(f"‚ö° Pr√™t pour d√©ploiement instantan√© !")
    
    if os.getenv('RENDER'):
        print("üåç Mode RENDER Production")
    
    app.run(
        host='0.0.0.0',
        port=PORT,
        debug=DEBUG_MODE,
        threaded=True
    )